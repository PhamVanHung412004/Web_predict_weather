#!/usr/bin/env python3
"""
Script ƒë·ªÉ c·∫≠p nh·∫≠t b√°o c√°o v·ªõi ph√¢n t√≠ch Gemini AI
"""

import json
import re

def load_gemini_analyses():
    """Load ph√¢n t√≠ch Gemini AI t·ª´ file JSON"""
    with open('gemini_analyses_20251011_120801.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def get_analysis_for_image(analyses, dataset_name, filename):
    """L·∫•y ph√¢n t√≠ch cho m·ªôt ·∫£nh c·ª• th·ªÉ"""
    if dataset_name in analyses and filename in analyses[dataset_name]:
        analysis = analyses[dataset_name][filename]
        evaluation = analysis.get('evaluation', '')
        confidence = analysis.get('confidence', 0)
        return evaluation, confidence
    return None, 0

def format_analysis_text(evaluation):
    """Format text ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp"""
    if not evaluation:
        return ""
    
    # T√°ch c√°c ph·∫ßn ch√≠nh
    lines = evaluation.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if line.startswith('üß©'):
            # T√¨m text sau emoji
            text = line[1:].strip()
            if text.startswith('1.'):
                text = text[2:].strip()
            formatted_lines.append(f"\nüß© **M√¥ t·∫£ ng·∫Øn g·ªçn:**")
        elif line.startswith('üìä'):
            text = line[1:].strip()
            if text.startswith('2.'):
                text = text[2:].strip()
            formatted_lines.append(f"\nüìä **Ph√¢n t√≠ch chuy√™n s√¢u:**")
        elif line.startswith('üí°'):
            text = line[1:].strip()
            if text.startswith('3.'):
                text = text[2:].strip()
            formatted_lines.append(f"\nüí° **Nh·∫≠n ƒë·ªãnh & √ù nghƒ©a:**")
        elif line.startswith('üöÄ'):
            text = line[1:].strip()
            if text.startswith('4.'):
                text = text[2:].strip()
            formatted_lines.append(f"\nüöÄ **ƒê·ªÅ xu·∫•t:**")
        elif line.startswith('‚Ä¢'):
            formatted_lines.append(f"- {line[1:].strip()}")
        elif line.startswith('-'):
            formatted_lines.append(f"- {line[1:].strip()}")
        elif line and not line.startswith('**') and not line.startswith('üß©') and not line.startswith('üìä') and not line.startswith('üí°') and not line.startswith('üöÄ'):
            formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)

def update_report():
    """C·∫≠p nh·∫≠t b√°o c√°o v·ªõi ph√¢n t√≠ch Gemini AI"""
    analyses = load_gemini_analyses()
    
    # ƒê·ªçc file b√°o c√°o hi·ªán t·∫°i
    with open('dataset_test_report_20251011_115040.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Mapping dataset names
    dataset_mapping = {
        'comb_PM25_Hanoi_2018_sm': 'comb_PM25_Hanoi_2018_sm',
        'comb_PM25_wind_Hanoi_2018_v1': 'comb_PM25_wind_Hanoi_2018_v1', 
        'comb_PM25_wind_Hanoi_2018_v2': 'comb_PM25_wind_Hanoi_2018_v2'
    }
    
    # Pattern ƒë·ªÉ t√¨m c√°c bi·ªÉu ƒë·ªì
    pattern = r'!\[([^\]]+)\]\(([^)]+)\)\n\*\*(\d+)\. ([^*]+)\*\*\n- File: `([^`]+)`'
    
    def replace_image_section(match):
        title = match.group(1)
        image_path = match.group(2)
        number = match.group(3)
        description = match.group(4)
        filename = match.group(5)
        
        # X√°c ƒë·ªãnh dataset t·ª´ image path
        dataset_name = None
        for ds in dataset_mapping.keys():
            if ds in image_path:
                dataset_name = ds
                break
        
        if dataset_name:
            evaluation, confidence = get_analysis_for_image(analyses, dataset_name, filename)
            
            if evaluation:
                formatted_analysis = format_analysis_text(evaluation)
                confidence_text = f"\n**ƒê·ªô tin c·∫≠y:** {confidence:.1%}" if confidence > 0 else ""
                
                return f"""![{title}]({image_path})
**{number}. {description}**
- File: `{filename}`

**ƒê√°nh gi√° c·ªßa Gemini AI:**
{formatted_analysis}{confidence_text}"""
        
        return match.group(0)
    
    # Thay th·∫ø t·∫•t c·∫£ c√°c section
    updated_content = re.sub(pattern, replace_image_section, content, flags=re.MULTILINE)
    
    # L∆∞u file ƒë√£ c·∫≠p nh·∫≠t
    with open('dataset_test_report_20251011_115040.md', 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√°o c√°o v·ªõi ph√¢n t√≠ch Gemini AI!")

if __name__ == "__main__":
    update_report()
