#!/usr/bin/env python3
"""
Script ƒë·ªÉ ph√¢n t√≠ch t·ª´ng ·∫£nh b·∫±ng Gemini AI v√† c·∫≠p nh·∫≠t b√°o c√°o
"""

import requests
import json
import os
import time
from datetime import datetime

def analyze_image_with_gemini(image_path, dataset_name):
    """Ph√¢n t√≠ch m·ªôt ·∫£nh b·∫±ng Gemini AI"""
    try:
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(image_path):
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {image_path}")
            return None
        
        filename = os.path.basename(image_path)
        print(f"üîç Ph√¢n t√≠ch ·∫£nh: {filename}")
        
        # Copy ·∫£nh v√†o backend/results folder tr∆∞·ªõc
        backend_results = "/home/phamvanhung/system/Desktop/Project_ca_nhan/Web_predict_weather/backend/results"
        import shutil
        backend_image_path = os.path.join(backend_results, filename)
        shutil.copy2(image_path, backend_image_path)
        
        # G·ª≠i request ƒë·∫øn API ph√¢n t√≠ch ·∫£nh (ch·ªâ c·∫ßn filename)
        data = {
            'filename': filename
        }
        
        response = requests.post(
            'http://127.0.0.1:5001/api/analyze_image',
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng: {filename}")
            return result.get('analysis', {})
        else:
            print(f"‚ùå L·ªói ph√¢n t√≠ch: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        return None

def analyze_all_images_in_folder(folder_path, dataset_name):
    """Ph√¢n t√≠ch t·∫•t c·∫£ ·∫£nh trong folder"""
    print(f"\n{'='*60}")
    print(f"Ph√¢n t√≠ch ·∫£nh cho dataset: {dataset_name}")
    print(f"Folder: {folder_path}")
    print(f"{'='*60}")
    
    if not os.path.exists(folder_path):
        print(f"‚ùå Folder kh√¥ng t·ªìn t·∫°i: {folder_path}")
        return {}
    
    # L·∫•y danh s√°ch file PNG
    png_files = [f for f in os.listdir(folder_path) if f.endswith('.png')]
    png_files.sort()  # S·∫Øp x·∫øp theo t√™n
    
    print(f"üìä T√¨m th·∫•y {len(png_files)} ·∫£nh c·∫ßn ph√¢n t√≠ch")
    
    analyses = {}
    
    for i, filename in enumerate(png_files, 1):
        print(f"\n[{i}/{len(png_files)}] Ph√¢n t√≠ch: {filename}")
        
        image_path = os.path.join(folder_path, filename)
        analysis = analyze_image_with_gemini(image_path, dataset_name)
        
        if analysis:
            analyses[filename] = analysis
            print(f"‚úÖ Ho√†n th√†nh ph√¢n t√≠ch: {filename}")
        else:
            print(f"‚ùå Th·∫•t b·∫°i ph√¢n t√≠ch: {filename}")
        
        # Ngh·ªâ gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
        if i < len(png_files):
            print("‚è≥ Ch·ªù 2 gi√¢y...")
            time.sleep(2)
    
    return analyses

def update_report_with_analyses():
    """C·∫≠p nh·∫≠t b√°o c√°o v·ªõi ph√¢n t√≠ch Gemini AI"""
    # Danh s√°ch c√°c folder c·∫ßn ph√¢n t√≠ch
    folders = [
        {
            'path': 'results_comb_PM25_Hanoi_2018_sm_20251011_121424',
            'name': 'comb_PM25_Hanoi_2018_sm'
        },
        {
            'path': 'results_comb_PM25_wind_Hanoi_2018_v1_20251011_121456',
            'name': 'comb_PM25_wind_Hanoi_2018_v1'
        },
        {
            'path': 'results_comb_PM25_wind_Hanoi_2018_v2_20251011_121529',
            'name': 'comb_PM25_wind_Hanoi_2018_v2'
        }
    ]
    
    all_analyses = {}
    
    # Ph√¢n t√≠ch t·ª´ng folder
    for folder in folders:
        analyses = analyze_all_images_in_folder(folder['path'], folder['name'])
        all_analyses[folder['name']] = analyses
    
    # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    analysis_file = f"gemini_analyses_{timestamp}.json"
    
    with open(analysis_file, 'w', encoding='utf-8') as f:
        json.dump(all_analyses, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o: {analysis_file}")
    
    return all_analyses, analysis_file

def main():
    """H√†m ch√≠nh"""
    print("üöÄ B·∫ÆT ƒê·∫¶U PH√ÇN T√çCH ·∫¢NH B·∫∞NG GEMINI AI")
    print("="*60)
    
    # Ki·ªÉm tra backend
    try:
        response = requests.get('http://127.0.0.1:5001/api/health', timeout=5)
        if response.status_code != 200:
            print("‚ùå Backend kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng kh·ªüi ƒë·ªông backend tr∆∞·ªõc!")
            return
    except:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn backend. Vui l√≤ng kh·ªüi ƒë·ªông backend tr∆∞·ªõc!")
        return
    
    print("‚úÖ Backend ƒë√£ s·∫µn s√†ng!")
    
    # B·∫Øt ƒë·∫ßu ph√¢n t√≠ch
    try:
        all_analyses, analysis_file = update_report_with_analyses()
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        total_images = sum(len(analyses) for analyses in all_analyses.values())
        successful_analyses = sum(len(analyses) for analyses in all_analyses.values())
        
        print(f"\nüéâ HO√ÄN TH√ÄNH PH√ÇN T√çCH!")
        print(f"üìä Th·ªëng k√™:")
        print(f"   - T·ªïng s·ªë ·∫£nh: {total_images}")
        print(f"   - Ph√¢n t√≠ch th√†nh c√¥ng: {successful_analyses}")
        print(f"   - File k·∫øt qu·∫£: {analysis_file}")
        
        # In chi ti·∫øt t·ª´ng dataset
        for dataset_name, analyses in all_analyses.items():
            print(f"\nüìÅ {dataset_name}:")
            print(f"   - S·ªë ·∫£nh ƒë√£ ph√¢n t√≠ch: {len(analyses)}")
            for filename, analysis in analyses.items():
                if analysis:
                    evaluation = analysis.get('evaluation', 'Kh√¥ng c√≥ ƒë√°nh gi√°')
                    confidence = analysis.get('confidence', 0)
                    print(f"   ‚úÖ {filename}: {evaluation[:50]}... (ƒê·ªô tin c·∫≠y: {confidence:.2f})")
                else:
                    print(f"   ‚ùå {filename}: Ph√¢n t√≠ch th·∫•t b·∫°i")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")

if __name__ == "__main__":
    main()
