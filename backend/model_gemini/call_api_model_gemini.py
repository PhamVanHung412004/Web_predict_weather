import google.generativeai as genai
from PIL import Image
import os
import itertools
import re
from dotenv import load_dotenv

# --- Load bi·∫øn m√¥i tr∆∞·ªùng ---
load_dotenv()

# ƒê·ªçc danh s√°ch key t·ª´ file .env
API_KEYS = os.getenv("YOUR_API_KEY").split(",")
key_cycle = itertools.cycle(API_KEYS)  # t·∫°o v√≤ng l·∫∑p key

def configure_next_key():
    """Ch·ªçn key k·∫ø ti·∫øp v√† c·∫•u h√¨nh l·∫°i Gemini."""
    api_key = next(key_cycle)
    genai.configure(api_key=api_key)
    print(f"[üîë] ƒêang s·ª≠ d·ª•ng key: {api_key[:10]}...")  # ch·ªâ in v√†i k√Ω t·ª± ƒë·∫ßu
    return api_key


def read_image(image_input) -> Image:
    """ƒê·ªçc ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n ho·∫∑c bytes."""
    if isinstance(image_input, str):
        return Image.open(image_input)
    elif isinstance(image_input, bytes):
        import io
        return Image.open(io.BytesIO(image_input))
    else:
        return image_input


def clean_analysis_text(text: str) -> str:
    """L√†m s·∫°ch v√† ƒë·ªãnh d·∫°ng vƒÉn b·∫£n ph√¢n t√≠ch bi·ªÉu ƒë·ªì."""
    text = text.strip()
    text = re.sub(r'\n{2,}', '\n', text)

    replacements = {
        r'\*\*1\..*M√¥ t·∫£.*\*\*': 'üß© **1. M√¥ t·∫£ ng·∫Øn g·ªçn:**',
        r'\*\*2\..*Ph√¢n t√≠ch.*\*\*': 'üìä **2. Ph√¢n t√≠ch chuy√™n s√¢u:**',
        r'\*\*3\..*Nh·∫≠n ƒë·ªãnh.*\*\*': 'üí° **3. Nh·∫≠n ƒë·ªãnh & √ù nghƒ©a:**',
        r'\*\*4\..*ƒê·ªÅ xu·∫•t.*\*\*': 'üöÄ **4. ƒê·ªÅ xu·∫•t:**',
    }
    for pattern, replacement in replacements.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)

    text = re.sub(r'^\*\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = re.sub(r'\n\s*\*\s+', '\n‚Ä¢ ', text)
    text = text.replace('**', '')
    return text.strip()


class Model:
    """Wrapper g·ªçi Gemini ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh."""
    def __init__(self, model_name: str, prompt_system_scan_image: str, path_image) -> None:
        self.__model_name = model_name
        self.__prompt_system_scan_image = prompt_system_scan_image
        self.__path_image = path_image

    @property
    def Call_API_Model(self) -> str:
        """G·ªçi API Gemini v√† x·ª≠ l√Ω gi·ªõi h·∫°n."""
        for _ in range(len(API_KEYS)):
            api_key = configure_next_key()
            model = genai.GenerativeModel(self.__model_name)
            image = read_image(self.__path_image)
            try:
                response = model.generate_content([self.__prompt_system_scan_image, image])
                return clean_analysis_text(response.text)
            except Exception as e:
                error_str = str(e)
                print(f"[‚ö†Ô∏è] L·ªói v·ªõi key {api_key[:10]}...: {error_str}")
                if "429" in error_str or "quota" in error_str.lower():
                    print("[üîÅ] Th·ª≠ key ti·∫øp theo...")
                    continue  # chuy·ªÉn sang key k·∫ø
                raise e  # l·ªói kh√°c th√¨ d·ª´ng lu√¥n
        raise RuntimeError("T·∫•t c·∫£ API key ƒë·ªÅu b·ªã gi·ªõi h·∫°n ho·∫∑c l·ªói.")
